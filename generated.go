// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

type UpdatesSinceErrorCode string

const (
	UpdatesSinceErrorCodeUnauthorized UpdatesSinceErrorCode = "UNAUTHORIZED"
)

// __getUpdatesInput is used internally by genqlient
type __getUpdatesInput struct {
	Since string `json:"since"`
	After string `json:"after"`
}

// GetSince returns __getUpdatesInput.Since, and is useful for accessing the field via an interface.
func (v *__getUpdatesInput) GetSince() string { return v.Since }

// GetAfter returns __getUpdatesInput.After, and is useful for accessing the field via an interface.
func (v *__getUpdatesInput) GetAfter() string { return v.After }

// getUpdatesResponse is returned by getUpdates on success.
type getUpdatesResponse struct {
	UpdatesSince getUpdatesUpdatesSinceUpdatesSinceResult `json:"-"`
}

// GetUpdatesSince returns getUpdatesResponse.UpdatesSince, and is useful for accessing the field via an interface.
func (v *getUpdatesResponse) GetUpdatesSince() getUpdatesUpdatesSinceUpdatesSinceResult {
	return v.UpdatesSince
}

func (v *getUpdatesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getUpdatesResponse
		UpdatesSince json.RawMessage `json:"updatesSince"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getUpdatesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdatesSince
		src := firstPass.UpdatesSince
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetUpdatesUpdatesSinceUpdatesSinceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getUpdatesResponse.UpdatesSince: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetUpdatesResponse struct {
	UpdatesSince json.RawMessage `json:"updatesSince"`
}

func (v *getUpdatesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getUpdatesResponse) __premarshalJSON() (*__premarshalgetUpdatesResponse, error) {
	var retval __premarshalgetUpdatesResponse

	{

		dst := &retval.UpdatesSince
		src := v.UpdatesSince
		var err error
		*dst, err = __marshalgetUpdatesUpdatesSinceUpdatesSinceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getUpdatesResponse.UpdatesSince: %w", err)
		}
	}
	return &retval, nil
}

// getUpdatesUpdatesSinceUpdatesSinceError includes the requested fields of the GraphQL type UpdatesSinceError.
type getUpdatesUpdatesSinceUpdatesSinceError struct {
	Typename   string                  `json:"__typename"`
	ErrorCodes []UpdatesSinceErrorCode `json:"errorCodes"`
}

// GetTypename returns getUpdatesUpdatesSinceUpdatesSinceError.Typename, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceError) GetTypename() string { return v.Typename }

// GetErrorCodes returns getUpdatesUpdatesSinceUpdatesSinceError.ErrorCodes, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceError) GetErrorCodes() []UpdatesSinceErrorCode {
	return v.ErrorCodes
}

// getUpdatesUpdatesSinceUpdatesSinceResult includes the requested fields of the GraphQL interface UpdatesSinceResult.
//
// getUpdatesUpdatesSinceUpdatesSinceResult is implemented by the following types:
// getUpdatesUpdatesSinceUpdatesSinceError
// getUpdatesUpdatesSinceUpdatesSinceSuccess
type getUpdatesUpdatesSinceUpdatesSinceResult interface {
	implementsGraphQLInterfacegetUpdatesUpdatesSinceUpdatesSinceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getUpdatesUpdatesSinceUpdatesSinceError) implementsGraphQLInterfacegetUpdatesUpdatesSinceUpdatesSinceResult() {
}
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccess) implementsGraphQLInterfacegetUpdatesUpdatesSinceUpdatesSinceResult() {
}

func __unmarshalgetUpdatesUpdatesSinceUpdatesSinceResult(b []byte, v *getUpdatesUpdatesSinceUpdatesSinceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "UpdatesSinceError":
		*v = new(getUpdatesUpdatesSinceUpdatesSinceError)
		return json.Unmarshal(b, *v)
	case "UpdatesSinceSuccess":
		*v = new(getUpdatesUpdatesSinceUpdatesSinceSuccess)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UpdatesSinceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getUpdatesUpdatesSinceUpdatesSinceResult: "%v"`, tn.TypeName)
	}
}

func __marshalgetUpdatesUpdatesSinceUpdatesSinceResult(v *getUpdatesUpdatesSinceUpdatesSinceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getUpdatesUpdatesSinceUpdatesSinceError:
		typename = "UpdatesSinceError"

		result := struct {
			TypeName string `json:"__typename"`
			*getUpdatesUpdatesSinceUpdatesSinceError
		}{typename, v}
		return json.Marshal(result)
	case *getUpdatesUpdatesSinceUpdatesSinceSuccess:
		typename = "UpdatesSinceSuccess"

		result := struct {
			TypeName string `json:"__typename"`
			*getUpdatesUpdatesSinceUpdatesSinceSuccess
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getUpdatesUpdatesSinceUpdatesSinceResult: "%T"`, v)
	}
}

// getUpdatesUpdatesSinceUpdatesSinceSuccess includes the requested fields of the GraphQL type UpdatesSinceSuccess.
type getUpdatesUpdatesSinceUpdatesSinceSuccess struct {
	Typename string                                                              `json:"__typename"`
	Edges    []getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdge `json:"edges"`
	PageInfo getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo                   `json:"pageInfo"`
}

// GetTypename returns getUpdatesUpdatesSinceUpdatesSinceSuccess.Typename, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccess) GetTypename() string { return v.Typename }

// GetEdges returns getUpdatesUpdatesSinceUpdatesSinceSuccess.Edges, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccess) GetEdges() []getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdge {
	return v.Edges
}

// GetPageInfo returns getUpdatesUpdatesSinceUpdatesSinceSuccess.PageInfo, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccess) GetPageInfo() getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo {
	return v.PageInfo
}

// getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdge includes the requested fields of the GraphQL type SyncUpdatedItemEdge.
type getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdge struct {
	Node getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem `json:"node"`
}

// GetNode returns getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdge.Node, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdge) GetNode() getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem {
	return v.Node
}

// getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem includes the requested fields of the GraphQL type SearchItem.
type getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem struct {
	Url        string                                                                                               `json:"url"`
	Title      string                                                                                               `json:"title"`
	Highlights []getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight `json:"highlights"`
}

// GetUrl returns getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem.Url, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem) GetUrl() string {
	return v.Url
}

// GetTitle returns getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem.Title, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem) GetTitle() string {
	return v.Title
}

// GetHighlights returns getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem.Highlights, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItem) GetHighlights() []getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight {
	return v.Highlights
}

// getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight includes the requested fields of the GraphQL type Highlight.
type getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight struct {
	Quote      string `json:"quote"`
	Annotation string `json:"annotation"`
}

// GetQuote returns getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight.Quote, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight) GetQuote() string {
	return v.Quote
}

// GetAnnotation returns getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight.Annotation, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessEdgesSyncUpdatedItemEdgeNodeSearchItemHighlightsHighlight) GetAnnotation() string {
	return v.Annotation
}

// getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo includes the requested fields of the GraphQL type PageInfo.
type getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getUpdatesUpdatesSinceUpdatesSinceSuccessPageInfo) GetEndCursor() string { return v.EndCursor }

// The query or mutation executed by getUpdates.
const getUpdates_Operation = `
query getUpdates ($since: Date!, $after: String!) {
	updatesSince(sort: {by:UPDATED_TIME,order:DESCENDING}, since: $since, after: $after) {
		__typename
		... on UpdatesSinceSuccess {
			edges {
				node {
					url
					title
					highlights {
						quote
						annotation
					}
				}
			}
			pageInfo {
				hasNextPage
				endCursor
			}
		}
		... on UpdatesSinceError {
			errorCodes
		}
	}
}
`

func getUpdates(
	ctx_ context.Context,
	client_ graphql.Client,
	since string,
	after string,
) (*getUpdatesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUpdates",
		Query:  getUpdates_Operation,
		Variables: &__getUpdatesInput{
			Since: since,
			After: after,
		},
	}
	var err_ error

	var data_ getUpdatesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
